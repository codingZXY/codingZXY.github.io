<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>三尾先生的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-14T03:07:48.695Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>三尾先生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Frida环境搭建与简单Hook</title>
    <link href="http://yoursite.com/2019/07/14/Frida%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E7%AE%80%E5%8D%95Hook/"/>
    <id>http://yoursite.com/2019/07/14/Frida环境搭建与简单Hook/</id>
    <published>2019-07-14T03:05:36.092Z</published>
    <updated>2019-07-14T03:07:48.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li><p>安装Python运行环境</p><p>  为了与当前最新的frida版本兼容，需安装Python3.7+的版本</p></li><li><p>安装<code>frida</code>和<code>frida-tools</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装frida的时间比较长，完成后会显示版本号，下载frida-server文件时的版本需与该版本一致。</span></span><br><span class="line">pip install frida</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装frida-tools</span></span><br><span class="line">pip install frida-tools</span><br></pre></td></tr></table></figure></li><li><p>下载<code>frida-server</code>文件</p><p>在<a href="http://www.github.com/frida/frida/releases" target="_blank" rel="noopener">frida官方Github</a>下载server文件，如果是真机，选择 <code>frida-server-版本-android-arm.xz</code>；如果是模拟器，选择 <code>frida-server-版本-android-x86.xz</code>。如果操作系统是64位，则选择后缀为<code>_64</code>的文件。下载完成后需要解压。(下载很慢或无法下载可尝试用手机连4G下载, 亲测可行)</p></li><li><p>将解压后的<code>frida-server</code>文件push到真机或模拟器中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不一定要放在data/local/tmp目录下，但该目录所需权限较低</span></span><br><span class="line">adb push <span class="string">"frida-server文件路径"</span> data/<span class="built_in">local</span>/tmp</span><br></pre></td></tr></table></figure></li><li><p>依次运行以下命令，修改server文件权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line"></span><br><span class="line"># 获取root权限</span><br><span class="line">su</span><br><span class="line"></span><br><span class="line"># 切换至frida-server文件所在目录</span><br><span class="line">cd data/local/tmp</span><br><span class="line"></span><br><span class="line"># 查看该目录下的所有文件</span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line"># 觉得文件名太长可以用移动文件命令来修改一下文件名</span><br><span class="line">mv &quot;frida-server&quot; fs</span><br><span class="line"></span><br><span class="line"># 修改权限</span><br><span class="line">chmod 777 fs</span><br><span class="line"></span><br><span class="line"># 测试能否启动，若无任何报错则代表启动成功</span><br><span class="line">./fs</span><br></pre></td></tr></table></figure></li></ul><h2 id="简单Hook"><a href="#简单Hook" class="headerlink" title="简单Hook"></a>简单Hook</h2><p>此处以自己写的一个简单 Demo 为例，将 apk 文件在 jadx 中打开，在<code>AndroidManifest.xml</code>文件中找到这个 app 的入口类：</p><p><img src="https://i.loli.net/2019/07/14/5d2a9b841809235680.png" alt="1559457700428"></p><p><img src="https://i.loli.net/2019/07/14/5d2a9ba49407148593.png" alt="1559457982251"></p><p>查看入口类源码，可以看到有个<code>onCreate</code>方法，一个 app 在启动时，首先会执行该方法。通过观察以上代码，可以发现 Button 上绑了一个点击事件 check ,在 check 函数中检测输入框中的用户名和密码是否为”ethan”和”1234”，如果是，则提示“登陆成功”，否则提示“登陆失败”。</p><p>现在，我们要通过 Hook 它的 check 方法，使得无论输入什么东西，点击按钮时都能提示登录成功。</p><p>新建一个 py 文件，写下frida的框架代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida,sys</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">"""</span></span><br><span class="line"><span class="string">Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">    var hook_cls = Java.use('com.example.myapplication.MainActivity')</span></span><br><span class="line"><span class="string">    hook_cls.check.implementation = function(a,b)&#123;</span></span><br><span class="line"><span class="string">        console.log("Hook Start...");</span></span><br><span class="line"><span class="string">        send(arguments);</span></span><br><span class="line"><span class="string">        a = "ethan";</span></span><br><span class="line"><span class="string">        b = "1234";</span></span><br><span class="line"><span class="string">        send("Success!");</span></span><br><span class="line"><span class="string">        return this.check(a,b);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">message</span><span class="params">(message,data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">"type"</span>] == <span class="string">'send'</span>:</span><br><span class="line">        print(<span class="string">"[*] &#123;0&#125;"</span>.format(message[<span class="string">"payload"</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(message)</span><br><span class="line"></span><br><span class="line">process = frida.get_remote_device().attach(<span class="string">'com.example.myapplication'</span>)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">"message"</span>,message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><p>对于一些简单的Hook，我们只需关心 js 部分的代码即可。调用<code>Java.use</code>方法并传入类名的完整路径，可以声明一个我们需要Hook的类。此处我们需要Hook的是<code>MainActivity</code>的<code>check</code>方法，可以用<code>hook_cls.check.implementation</code>来改写该方法的实现（相当于重新定义该方法）。</p><p>原方法中有两个参数，所以我们改写时也带上了两个参数 a 和 b 。使用<code>console.log</code>方法来打印一行开始Hook的消息，然后用<code>send</code>方法输出传入的参数数组。<code>send</code>方法与<code>console.log</code>方法都是在控制台打印消息, 二者区别在于, 如果消息是一个对象, send 会自动处理为 Json, console.log 则只会打印 Object。</p><p>将 a 和 b 改写为 “ethan”  和 “1234” ，再调用原来的 check 方法。</p><h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><p>现在，让我们来运行一下看看效果。首先需要做一下端口转发：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:27042 tcp:27042</span><br></pre></td></tr></table></figure><p>然后进入 shell 并切换到data/local/tmp目录下来启动rida-server：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell </span><br><span class="line"></span><br><span class="line">cd data/local/tmp</span><br><span class="line"></span><br><span class="line">./fs</span><br></pre></td></tr></table></figure><p>启动完成后，<strong>先在真机或模拟其中打开 app ，再运行脚本</strong>。这个顺序很重要，否则脚本会运行失败。</p><p><img src="https://i.loli.net/2019/07/14/5d2a9bbb7a11441698.png" alt="1559464962972"></p><p>脚本运行后，在 app 中随便输入然后点下测试，如果能弹出”登录成功”，就代表Hook成功了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装Python运行环境&lt;/p&gt;
&lt;p&gt;  为了与当前最新的frida版本兼容，需安装Python3.7+
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Xposed环境搭建与简单Hook</title>
    <link href="http://yoursite.com/2019/06/19/Xposed%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E7%AE%80%E5%8D%95Hook/"/>
    <id>http://yoursite.com/2019/06/19/Xposed环境搭建与简单Hook/</id>
    <published>2019-06-18T16:42:35.857Z</published>
    <updated>2019-06-18T16:43:23.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol><li><p>设备已Root并安装好 Xposed Installer</p></li><li><p><a href="http://jcenter.bintray.com/de/robv/android/xposed/api/" target="_blank" rel="noopener">http://jcenter.bintray.com/de/robv/android/xposed/api/</a> 下载 api82.jar</p></li><li><p>在 AndroidStudio 下新建一个项目（不需要界面）</p></li><li><p>选择以 Project 方式显示目录最接近原始目录结构</p></li><li><p>在 app 目录下新建一个文件夹 lib，并将 api82.jar 复制到 lib 下，复制完后需要 Add As Library</p></li><li><p>打开 app/build gradle ，将 dependencies 中的 lib/api82.jar 的 implementation 改为 compileOnly</p></li><li><p>修改 AndroidManifest.xml 文件中的 application 如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">        android:allowBackup=<span class="string">"true"</span></span><br><span class="line">        android:icon=<span class="string">"@mipmap/ic_launcher"</span></span><br><span class="line">        android:label=<span class="string">"@string/app_name"</span></span><br><span class="line">        android:roundIcon=<span class="string">"@mipmap/ic_launcher_round"</span></span><br><span class="line">        android:supportsRtl=<span class="string">"true"</span></span><br><span class="line">        android:theme=<span class="string">"@style/AppTheme"</span>&gt;</span><br><span class="line">        &lt;meta-data</span><br><span class="line">            android:name=<span class="string">"xposedmodule"</span></span><br><span class="line">            android:value=<span class="string">"true"</span> /&gt;</span><br><span class="line">        &lt;meta-data</span><br><span class="line">            android:name=<span class="string">"xposeddescription"</span></span><br><span class="line">            android:value=<span class="string">"my name is threetails"</span> /&gt;</span><br><span class="line">        &lt;meta-data</span><br><span class="line">            android:name=<span class="string">"xposedminversion"</span></span><br><span class="line">            android:value=<span class="string">"53"</span> /&gt;</span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure></li><li><p>在 main/java/包名文件下创建一个 Hook 类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hook</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(<span class="keyword">final</span> LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line"></span><br><span class="line">        Log.d (<span class="string">"threetails"</span>, <span class="string">"Hook Start..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!lpparam.packageName.equals(<span class="string">"com.xx.xx"</span>)) <span class="keyword">return</span>; <span class="comment">//Hook的app包名过滤</span></span><br><span class="line"></span><br><span class="line">        Log.d (<span class="string">"threetails"</span>, <span class="string">"Hooking..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 main 下创建 assets 目录，并在 assets 下创建一个文本文件 xposed_init</p></li><li><p>在 xposed_init 中输入入口类如 <code>com.example.test.Hook</code></p></li><li><p>选择 Build - Build Bundle / Apk - Build Apk 编译apk</p></li><li><p>在 app/build/outputs/apk/debug 下找到 app-debug.apk，安装至设备</p></li><li><p>在 xposed installer 中激活该模块，并软重启</p></li><li><p>在 Android Studio 的 Logcat 中查看输出（可添加 tag 和包名过滤）</p></li></ol><h2 id="Hook静态变量"><a href="#Hook静态变量" class="headerlink" title="Hook静态变量"></a>Hook静态变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hook</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(<span class="keyword">final</span> LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        Log.d (<span class="string">"threetails"</span>, <span class="string">"Hook Start..."</span>);</span><br><span class="line">        <span class="keyword">if</span> (!lpparam.packageName.equals(<span class="string">"com.xx.xx"</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到要hook的静态变量所在的类</span></span><br><span class="line">        Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="string">"com.xx.xx.classname"</span>, lpparam.classLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hook整型静态变量</span></span><br><span class="line">        XposedHelpers.setStaticIntField(clazz,<span class="string">"staticInt"</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hook字符串变量</span></span><br><span class="line">        XposedHelpers.setStaticObjectField(clazz,<span class="string">"staticString"</span>,<span class="string">"hookString"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hook构造函数"><a href="#Hook构造函数" class="headerlink" title="Hook构造函数"></a>Hook构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hook</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(<span class="keyword">final</span> LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        Log.d (<span class="string">"threetails"</span>, <span class="string">"Hook Start..."</span>);</span><br><span class="line">        <span class="keyword">if</span> (!lpparam.packageName.equals(<span class="string">"com.xx.xx"</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到要hook的静态变量所在的类</span></span><br><span class="line">        Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="string">"com.xx.xx.classname"</span>, lpparam.classLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hook无参构造函数</span></span><br><span class="line">        XposedHelpers.findAndHookConstructor(clazz, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Log.d(<span class="string">"threetails"</span>,<span class="string">"这是无参构造函数前"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Log.d(<span class="string">"threetails"</span>,<span class="string">"这是无参构造函数后"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hook有参构造函数</span></span><br><span class="line">        XposedHelpers.findAndHookConstructor(clazz, String.class, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                param.args[<span class="number">0</span>] = <span class="string">"hookParam"</span>;</span><br><span class="line">                Log.d(<span class="string">"threetails"</span>,<span class="string">"这是有参构造函数前"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Log.d(<span class="string">"threetails"</span>,<span class="string">"这是有参构造函数后"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hook普通方法"><a href="#Hook普通方法" class="headerlink" title="Hook普通方法"></a>Hook普通方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hook</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(<span class="keyword">final</span> LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        Log.d (<span class="string">"threetails"</span>, <span class="string">"Hook Start..."</span>);</span><br><span class="line">        <span class="keyword">if</span> (!lpparam.packageName.equals(<span class="string">"com.xx.xx"</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到要hook的静态变量所在的类</span></span><br><span class="line">        Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="string">"com.xx.xx.classname"</span>, lpparam.classLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//私有、公有、静态等普通方法都用该函数来Hook</span></span><br><span class="line">        XposedHelpers.findAndHookMethod(clazz, <span class="string">"publicFunc"</span>, String.class, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Log.d(<span class="string">"threetails"</span>,<span class="string">"publicFunc is hooked before"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Log.d(<span class="string">"threetails"</span>,<span class="string">"publicFunc is hooked after"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设备已Root并安装好 Xposed Installer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初探js逆向（二）</title>
    <link href="http://yoursite.com/2019/05/19/%E5%88%9D%E6%8E%A2js%E9%80%86%E5%90%91%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/05/19/初探js逆向（二）/</id>
    <published>2019-05-18T16:26:08.570Z</published>
    <updated>2019-05-19T06:45:13.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果你是没有任何 js 逆向经验的爬虫萌新，且没看过上篇的《<a href="http://www.threetails.xyz/2019/05/10/%E5%88%9D%E6%8E%A2js%E9%80%86%E5%90%91/#more" target="_blank" rel="noopener">初探js逆向</a>》，建议先移步去看，因为本篇所使用的案例相对上篇，难度会更大一些。</p><p>在上一篇中，我们学习了一个入门案例的逆向流程。然而，加密的方式有很多，不可能以一概全。在进入本篇正题前，我们先回忆一下上篇的逆向思路：</p><blockquote><p>…</p><p>不妨思考一下，参数虽做了加密，但网页毕竟要正常显示内容，所以在网页渲染的过程中，一定有个地方对这个参数做了解密，然后将数据写入html。</p><p>也就是说，我们需要在网页渲染的过程里，一步步观察，看看到底是哪个位置对这个参数做了解密。</p><p>…</p></blockquote><p>其实，这个思路有个前提：加密参数必须是请求返回的<strong>结果参数</strong>。如果网站在请求发起时就对<strong>请求参数</strong>做了加密，这个思路就不管用了。</p><p>另外，在上篇中，因为案例比较简单，在找到解密函数之后工作就完成了 90%，所以抠代码的部分我们一笔带过。而本篇的案例，即便找到了加密位置，可能也只完成了一半工作。</p><p>所以本篇将以<a href="https://www.qimai.cn/rank/marketRank" target="_blank" rel="noopener">七麦数据</a>这个网站为例，介绍‘当请求参数被加密时的逆向思路’以及‘抠代码’的正确姿势。</p><h2 id="网站分析"><a href="#网站分析" class="headerlink" title="网站分析"></a>网站分析</h2><p>访问 <a href="https://www.qimai.cn/rank/marketRank/market/3/category/-2/date/2019-05-18" target="_blank" rel="noopener">https://www.qimai.cn/rank/marketRank/market/3/category/-2/date/2019-05-18</a> 这个地址，可以看到：</p><p><img src="https://i.loli.net/2019/05/19/5ce02f49bbef066480.png" alt="1558176719120"></p><p>红框中的App榜单列表即为我们的目标数据。来看看它发起了哪些请求：</p><p><img src="https://i.loli.net/2019/05/19/5ce02f9c35d7415179.png" alt="1558176929238"></p><p>在 <code>marketRank</code> 这个请求的响应内容里能够找到我们的目标数据，而且是清晰的 json 结构。但不要高兴得太早，我们再看一下它的请求参数：</p><p><img src="https://i.loli.net/2019/05/19/5ce02fc4937af67831.png" alt="1558177495621"></p><p><code>market(3)</code>、<code>category(-2)</code>、<code>date</code> 分别表示应用商店（应用宝）、类别（全部游戏）和日期，想构造它们都很简单，为了后文描述方便，我们暂且称之为‘简单三参’。</p><p>需要重点关注的是这个 <code>analysis</code>，它是一个被加密的<strong>必选参数</strong>，请求时必须携带，否则无法正常返回数据。这时候你可能会想：“那我直接把它拷贝下来，模拟请求时再带上不就行了？”，然而，只要你稍微分析下就会发现，这个参数并不是固定的，它会随着简单三参的变化而改变。且这类榜单数据通常具有时效性，如果你想进行<strong>批量</strong>、<strong>持久</strong>地爬取<strong>有效</strong>数据，这种‘提前收集 analysis ’的方式是不现实的。</p><p>说了这么多，好像有些偏离主题了，我们的目的不是爬取网站，而是学习 js 逆向。</p><p>下面进入正题。</p><h2 id="逆向思路"><a href="#逆向思路" class="headerlink" title="逆向思路"></a>逆向思路</h2><p>我们先用上篇中提到的方式，在xhr请求里打上断点，刷新一下网页。</p><p><img src="https://i.loli.net/2019/05/19/5ce02fcdb90d526079.png" alt="1558180850101"></p><p>代码执行到了 <code>h.send(f)</code>，等等，好像哪里不对。send 不就是把请求发送出去吗？那是不是意味着请求参数在这步之前就已经生成完毕？观察一下上面几行代码，果然如此：</p><p><img src="https://i.loli.net/2019/05/19/5ce02fd8b9f6d11298.png" alt="1558181366544"></p><p>在 <code>t</code> 对象的 url 属性中可以看到，analysis 已经生成好了。那么我们再往下执行也没意义了，因为这个请求已经被发送到了服务端，客户端没必要再对它的参数进行解密。况且我们的目的是研究如何生成 analysis，而不是如何解密。</p><p>那怎样才能找到生成 analysis 的位置呢？我们可以先把它的值记录下来，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fGR5SX10dQ0oY3lVeGIkBH1HDQ1wExcWVlYPG1sAQltVRGJRXlMkFAxXBANUAQUHBQQFcBtV</span><br></pre></td></tr></table></figure><p>然后把断点打在一个比较早的地方（analysis 生成之前），一步步往下执行，这个值首次出现的位置，就是它生成的位置。</p><p>想把断点打在 analysis 生成之前，可以在 Network 选项卡下，该请求的 Initiator 列里看到它的调用栈，调用顺序由上而下：</p><p><img src="https://i.loli.net/2019/05/19/5ce02fe3aef9586122.png" alt="1558182881027"></p><p>在前几条里随便选一个，点进去打上断点，这里我看<code>get</code>比较顺眼，就选了这条，并在默认位置打上断点。打上断点后别急着刷新网页，这里有个坑需要先避一下。因为除了<code>marketRank</code>之外，<code>marketList</code>这个请求也有一个 analysis 参数，它请求的是应用商店列表（百度、应用宝、360…）。为了避免干扰，我们不要刷新网页，而是切换类别：</p><p><img src="https://i.loli.net/2019/05/19/5ce02fed4365d21351.png" alt="1558184074261"></p><p>通过这种方式来触发调试界面，就不会再去请求应用商店列表了。切换类别后即可触发弹出调试界面：</p><p><img src="https://i.loli.net/2019/05/19/5ce02ff7ab6d798122.png" alt="1558183179819"></p><p>可以发现，简单三参都已经出现了，但还没发现 analysis，它应该还没生成，让我们继续往下执行。注意，执行过程中时刻关注是否出现类似（切换了类别，analysis肯定会变化，所以是类似）我们之前记录下来的那个值。</p><p>此处省略一万步调试……，只要你耐心足够，就能找到下图中的代码：</p><p><img src="https://i.loli.net/2019/05/19/5ce02fff7700411357.png" alt="1558184945255"></p><p>可以看到，<code>r</code> 的值与我们之前记录的值很类似，为了进一步确定，可以在调试执行完成后看下请求中的 analysis 值是否与这个 <code>r</code> 的值一致。</p><p>答案是一致的。也就是说，接下来只要把 <code>r</code> 的生成代码全部抠下来，我们就能生成 analysis 了。感觉也没那么难对吧？其实这个网站，抠代码才是重头戏。</p><h2 id="抠代码"><a href="#抠代码" class="headerlink" title="抠代码"></a>抠代码</h2><p>开头中提到，本案例即便找到了加密位置，也只完成了一半工作。因为加密函数中做了大量的代码混淆和迷惑眼球的函数调用，想把它完整抠下来也不是件容易的事。如果你没有强大的心脏和足够的耐心，请止步于此；但如果你就喜欢折腾，请接着往下看。</p><p>鉴于本文的目的主要在于介绍‘请求参数被加密时的逆向思路’，所以不会对‘抠代码’的部分做详细讲解，也不会提供完整代码，但会稍微做一些提示，希望能对你有所帮助。以下提示内容只有真正去尝试抠代码的人才能看懂了。</p><ol><li><code>b</code> 写死。</li><li>抠出 <code>e</code> 的生成函数，生成 <code>e</code> 。<ul><li>时间戳与difftime（写死好像不影响）</li></ul></li><li>抠出 <code>m</code> 的生成函数，通过简单三参+URL 后缀+<code>e</code> 生成 <code>m</code> 。<ul><li>简单三参 sort 与 join</li><li>忽略迷惑代码 <code>a[no](n)[Ao]...</code></li><li>进入 e 内部打断点</li><li>只关注被调用并执行的代码</li><li>new一个Unit8Array</li><li>找到写入Unit8Array的代码</li><li>转base64</li><li>封装<code>f[La]</code>，便于步骤4调用</li></ul></li><li>抠出 <code>r</code> 的生成函数，通过 <code>m</code> 和 <code>b</code> 生成 <code>r</code>。<ul><li>搞定步骤3之后心态千万不要崩，因为胜利就在眼前</li><li>几个写死的变量</li><li><code>String[&quot;fromCharCode&quot;]</code></li></ul></li></ol><p>贴张逆向成功的截图：</p><p><img src="https://i.loli.net/2019/05/19/5ce03004978f649012.png" alt="1558189992861"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当请求的参数被加密时，将断点打在加密参数生成之前，在它的值首次出现的位置找到它的加密函数。</p><p>抠代码时，如果代码做了大量混淆。需要辨别哪些代码是迷惑你的，哪些代码是真正起作用的，哪些代码是不需要抠的，哪些代码是可以自己用其他方式替代的。</p><p>最后就碎碎念一下吧。</p><p>写这篇文章的时间是在大好的周末。当年轻的少男少女们在外玩耍时，我一人在家愉快地听着歌儿码着字，与广大爬虫道友们分享自己所学，丝毫不觉得浪费时间，反而收获很多。</p><p>知识分享是一个很好的学习方式，从分享的角度去看待问题时，为了把一件事情讲明白，你会做比平时更多的思考和研究。为了读者有更好的阅读体验，你需要将自己的文章当成一款产品来不断打磨。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;如果你是没有任何 js 逆向经验的爬虫萌新，且没看过上篇的《&lt;a href=&quot;http://www.threetails.xyz/2019/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初探js逆向</title>
    <link href="http://yoursite.com/2019/05/10/%E5%88%9D%E6%8E%A2js%E9%80%86%E5%90%91/"/>
    <id>http://yoursite.com/2019/05/10/初探js逆向/</id>
    <published>2019-05-10T10:18:11.008Z</published>
    <updated>2019-05-12T04:45:50.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文适合爬虫新手阅读，大佬也别绕道，欢迎指正和调教。</p><p>js逆向是让爬虫萌新们比较头疼的一块领域，因为市面上大部分的爬虫书籍等教程都未涉及这方面知识，需要爬取用js加密的网站时常常无从下手，只能使用selenium等自动化框架来模拟人工点击。但这种方式往往效率低下，所以本文将以<a href="https://www.qimingpian.com/finosda/project/pinvestment" target="_blank" rel="noopener">企名片</a>这个网站为例，带大家初探js逆向。</p><p>之所以选择这个网站，首先它难度不大，适合练手；其次即便破解了加密参数，想爬取数据还是得下些功夫，因为未登录情况下只显示一页数据，即便登录还得认证啥的比较麻烦。</p><p>废话不多说，下面进入正题。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>因为涉及js的调试验证，所以除了Python环境外，你还需要<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodejs</a>（js的运行环境）和<a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">WebStorm</a>（IDE）。</p><p>Nodejs去官网下载安装包后直接一键安装即可，安装完毕后去控制台运行<code>node --version</code>，如果出现版本号即代表安装成功。</p><p>WebStorm安装完后需要激活，激活教程网上很多，大家自行搜索。它是Jet Brains的产品（和PyCharm是同一家公司），所以使用方式与PyCharm很类似。</p><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><p>直接访问这个地址<a href="https://www.qimingpian.com/finosda/project/pinvestment" target="_blank" rel="noopener">https://www.qimingpian.com/finosda/project/pinvestment</a>，看到的是这个界面：</p><p><img src="https://i.loli.net/2019/05/10/5cd52ab8d38a6.png" alt="1557452498617"></p><p>我们需要获取图中红框里的数据，也就是创业项目列表。打开开发者工具，刷新一下页面，看看它发起了哪些请求：</p><p><img src="https://i.loli.net/2019/05/10/5cd52c8fc2f46.png" alt="1557452886685"></p><p>为减少干扰，先只看XHR和Doc的请求，一共有三个：pinvestment、productListVip、industryFieldVip。</p><p>在pinvestment的响应内容里，只能看到一堆js的调用，并没有我们想要的html，说明网页是由js动态生成的。</p><p>而在productListVip和industryFieldVip的响应内容里，都有一个”encrypt_data”的参数，很明显这是一个加密参数，参数内容像是一串Base64字符。既然网站对这个参数做了加密，说明它不想被爬取，所以可以做个假设：我们的目标数据就是encrypt_data参数里的内容。</p><p>有了这个假设，目的就很明确了，只要破解这个加密参数就行。</p><p>爬虫新手们往往走完上面步骤就止步不前。不妨思考一下，参数虽做了加密，但网页毕竟要正常显示内容，所以在网页渲染的过程中，一定有个地方对这个参数做了解密，然后将数据写入html。</p><p>也就是说，我们需要在网页渲染的过程里，一步步观察，看看到底是哪个位置对这个参数做了解密。</p><p>在开发者工具里的Sources选项卡中，可以找到这个网页的js文件夹，界面右侧有断点调试栏。</p><p><img src="https://i.loli.net/2019/05/10/5cd52c8fd6e1a.png" alt="1557456452687"></p><p>在js文件里打上断点，然后一步步调试，就能重现网页渲染的过程。那么断点应该打在哪个位置呢？在断点调试栏里有个XHR/fetch Breakpoints，它支持在发送XHR请求的位置打上断点，我们找到的两个含加密参数的请求就是XHR类型的，正好用上这个功能。点击<code>+</code>号输入请求名称即可：</p><p><img src="https://i.loli.net/2019/05/10/5cd52c8f95519.png" alt="1557457254227"></p><p>刷新页面，然后一步一步执行，发现可疑信息就把鼠标移上去看下。</p><p><img src="https://i.loli.net/2019/05/10/5cd52c8fe71f0.png" alt="1557469319278"></p><p>调试的两个小技巧：</p><ul><li><p>压缩的js点击左下角的花括号来美化</p><p><img src="https://i.loli.net/2019/05/10/5cd52c8fb7c1e.png" alt="1557468748994"></p></li><li><p>在调试过程中使用Console执行js代码。比如我觉得这个函数很可疑，想执行一下看看。</p><p><img src="https://i.loli.net/2019/05/10/5cd52c900100e.png" alt="1557469040990"></p></li></ul><p>其实上图中执行<code>Object(d.a)(e.encrypt_data)</code>返回的内容就是我们需要的数据了。进到这个函数体里边，就能找到解密函数：</p><p><img src="https://i.loli.net/2019/05/10/5cd52c8fdaaa1.png" alt="1557469787011"></p><p><code>function o(t)</code>就是我们需要的解密函数，可以看到它先调用<code>s</code>函数，传入了四个参数，除了<code>a.a.decode(t)</code>外其他三个都是写死的，最后用<code>JSON.parse</code>转为json对象。</p><p>然而，找到解密函数后，我们要做的不是去分析它函数内部做了什么，虽然可以研究它的解密算法然后用Python重写，但这样太复杂且没必要。因为我们可以用<a href="https://pypi.org/project/PyExecJS/" target="_blank" rel="noopener">PyExecJS</a>这个库，直接用Python调用并执行js代码。</p><p>这时候，WebStorm就派上用场了。新建一个js文件，把<code>function o</code>里涉及的代码全部抠下来。然后执行<code>console.log</code>把执行结果打印出来。篇幅问题就只贴部分代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解密函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_decrypt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(s(<span class="string">"5e5062e82f15fe4ca9d24bc5"</span>, my_decode(t), <span class="number">0</span>, <span class="number">0</span>, <span class="string">"012345677890123"</span>, <span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解密函数依赖项</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_decode</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    c = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span></span><br><span class="line">    f = <span class="regexp">/[\t\n\f\r ]/g</span></span><br><span class="line">    <span class="keyword">var</span> e = (t = <span class="built_in">String</span>(t).replace(f, <span class="string">""</span>)).length;</span><br><span class="line">    e % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; (e = (t = t.replace(<span class="regexp">/==?$/</span>, <span class="string">""</span>)).length),</span><br><span class="line">    (e % <span class="number">4</span> == <span class="number">1</span> || <span class="regexp">/[^+a-zA-Z0-9/]/</span>.test(t)) &amp;&amp; l(<span class="string">"Invalid character: the string to be decoded is not correctly encoded."</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n, r, i = <span class="number">0</span>, o = <span class="string">""</span>, a = <span class="number">-1</span>; ++a &lt; e; )</span><br><span class="line">        r = c.indexOf(t.charAt(a)),</span><br><span class="line">            n = i % <span class="number">4</span> ? <span class="number">64</span> * n + r : r,</span><br><span class="line">        i++ % <span class="number">4</span> &amp;&amp; (o += <span class="built_in">String</span>.fromCharCode(<span class="number">255</span> &amp; n &gt;&gt; (<span class="number">-2</span> * i &amp; <span class="number">6</span>)));</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码，加密参数太长就不贴上来了</span></span><br><span class="line">encrypt_data = <span class="string">"xxx"</span></span><br><span class="line">decrypt_data = my_decrypt(encrypt_data)</span><br><span class="line"><span class="built_in">console</span>.log(decrypt_data)</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://i.loli.net/2019/05/10/5cd52c8fb5c7a.png" alt="1557471614831"></p><p>确实是我们需要的数据没错，最后用Python去调用解密函数就行了。调用时还有个需要注意的地方，因为直接返回object给Python会报错，所以这里将JSON.parse移除了，返回parse前的json字符串，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//解密函数</span><br><span class="line">function my_decrypt(t) &#123;</span><br><span class="line">    return s(&quot;5e5062e82f15fe4ca9d24bc5&quot;, my_decode(t), 0, 0, &quot;012345677890123&quot;, 1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时为了防止这串字符串内有特殊编码的字符，这里将它转成base64再return：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function my_decrypt(t) &#123;</span><br><span class="line">    return new Buffer(s(&quot;5e5062e82f15fe4ca9d24bc5&quot;, my_decode(t), 0, 0, &quot;012345677890123&quot;, 1)).toString(&quot;base64&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在Python中用base64库的b64decode方法来解码即可。</p><p>本文所有代码已上传至<a href="https://github.com/codingZXY/LearnCrackJs/tree/master/qimingpian" target="_blank" rel="noopener">Github</a>，旨在学习和技术分享，请勿用于商业用途。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后总结一下，说说关于逆向的个人看法。</p><p>之所以市面上很少有爬虫逆向的书籍，除了因为它比较”敏感”之外，也因为它并没有固定的方法论。上文提供的也只是一种思路，其实还是有很多取巧的方式，比如在我们已知参数名为<code>encrypt_data</code>的情况下，在js文件夹下全局搜索，分分钟就能找到解密函数。</p><p>逆向过程挺糟心，也挺有趣的，且逆向成功后会有很大的成就感。</p><p>总而言之，逆向是一个提出假设和实际验证的过程，比如上文中的<code>encrypt_data</code>，我们不能百分百确定它就是我们需要的数据，但可以假设它是，来作为我们的突破口，即便最后发现不是，大不了再做新的假设。这有点像侦探探案，通过已知的信息作为线索来抽丝剥茧，最终破案。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文适合爬虫新手阅读，大佬也别绕道，欢迎指正和调教。&lt;/p&gt;
&lt;p&gt;js逆向是让爬虫萌新们比较头疼的一块领域，因为市面上大部分的爬虫书籍等教
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python玩转设计模式（一）：策略模式</title>
    <link href="http://yoursite.com/2019/04/19/strategy_pattern/"/>
    <id>http://yoursite.com/2019/04/19/strategy_pattern/</id>
    <published>2019-04-18T16:30:14.193Z</published>
    <updated>2019-04-18T16:31:07.042Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>『策略模式』定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p></blockquote><h2 id="模拟鸭子"><a href="#模拟鸭子" class="headerlink" title="模拟鸭子"></a>模拟鸭子</h2><p>假如让你设计一个模拟鸭子的游戏，鸭子的种类繁多，每种鸭子都会游泳和呱呱叫，你会如何设计？我想，大部分人和我一样，首先想到的是使用继承。</p><p><img src="https://i.loli.net/2019/04/19/5cb8a48cc18d1.png" alt="模拟鸭子.png"></p><p>这确实是一个不错的设计，使用了标准的OO（面向对象）技术，设计了一个鸭子基类，并让各种鸭子继承它，每种鸭子都会quack和swim，并实现各自的display方法。但是，软件开发有一个不变的真理，就是<strong>改变</strong>。一款软件，无论一开始设计得多好，过一阵子后，都需要迭代和更新。驱动改变的因素有很多，比如功能优化、新功能添加、软件兼容等等。</p><p>让我们回到模拟鸭子的游戏，用户觉得不过瘾，还想让鸭子能飞。嘿，能飞还不简单，这样不就行了：</p><p><img src="https://i.loli.net/2019/04/19/5cb8a48c87a85.png" alt="模拟鸭子(1).png"></p><p>我们忽略了一件事，并非所有鸭子都会飞。假设现在添加一个子类叫RubberDuck(橡皮鸭)，也继承自Duck，就会出现不符合逻辑的情况（会飞的橡皮鸭）。如果在RubberDuck里覆盖掉fly()方法呢？像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RubberDuck</span><span class="params">(Duck)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'黄色的橡皮鸭，喜欢在浴缸里游泳'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quack</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'吱吱吱'</span>) <span class="comment"># 覆盖quack，因为橡皮鸭的叫声与正常鸭子的叫声有所不同</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> <span class="comment"># 覆盖fly，因为橡皮鸭不会飞，所以调用时啥也不干</span></span><br></pre></td></tr></table></figure><p>这只能解决目前的问题，如果以后有个ModelDuck(模型鸭)，不会飞也不会叫；或者有个虽然会飞，但叫声跟橡皮鸭一样的类，又该怎么办？如果都用覆盖，代码就不能复用，以后维护起来就是恶梦。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过上面的例子，我们发现在基类中加上新的行为，会使得某些子类也具有这个不恰当的行为，如果在子类中覆盖该行为，又会导致代码重复且不能复用的情况。针对此情况，《Head First设计模式》给我们提供了解决方案：</p><p><img src="https://i.loli.net/2019/04/19/5cb8a53dc9e25.png" alt="1555592204828.png"></p><p>从上图中我们看到，飞行和呱呱叫的行为都被抽象成了接口，再定义不同的飞行行为类和呱呱叫行为类来实现这个接口。在Duck基类中定义了两种行为的属性，并增加了performQuack、perfromFly、setFlyBehavior、setQuackBehavior四个方法。这样一来，Duck的子类只要在初始化时声明自己的行为就行了。而且可以调用setFlyBehavior和setQuackBehavior方法来动态改变行为。下面，我们用Python代码实现一下，看看这么做到底能给我们带来什么好处。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="飞行行为"><a href="#飞行行为" class="headerlink" title="飞行行为"></a>飞行行为</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyBehavior</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span><span class="params">(FlyBehavior)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"I'm flying with my beautiful wings."</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span><span class="params">(FlyBehavior)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"I can't fly."</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyRocketPowered</span><span class="params">(FlyBehavior)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"I'm flying with a rocket."</span>)</span><br></pre></td></tr></table></figure><h3 id="呱呱叫行为"><a href="#呱呱叫行为" class="headerlink" title="呱呱叫行为"></a>呱呱叫行为</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuackBehavior</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quack</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quack</span><span class="params">(QuackBehavior)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quack</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"quack,quack,quack."</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Squeak</span><span class="params">(QuackBehavior)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quack</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"squeak,squeak,squeak."</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span><span class="params">(QuackBehavior)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quack</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"silence."</span>)</span><br></pre></td></tr></table></figure><p>Python中使用抽象类来实现类似Java中的interface接口。<code>metaclass=ABCMeta</code>表示该类为抽象类(即接口)，<code>@abstractmethod</code>装饰的函数为抽象函数，该函数必须在所有继承了该类的子类中实现。</p><h3 id="鸭子类"><a href="#鸭子类" class="headerlink" title="鸭子类"></a>鸭子类</h3><p>篇幅问题就不在此列出所有Duck子类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line">    fly_behavior = <span class="keyword">None</span></span><br><span class="line">    quack_behavior = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.fly_behavior.fly()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_quack</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.quack_behavior.quack()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_fly_behavior</span><span class="params">(self,fly_behavior)</span>:</span></span><br><span class="line">        self.fly_behavior = fly_behavior</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_quack_behavior</span><span class="params">(self,quack_behavior)</span>:</span></span><br><span class="line">        self.quack_behavior = quack_behavior</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swim</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'All ducks float.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span><span class="params">(Duck)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.fly_behavior = fb.FlyWithWings()</span><br><span class="line">        self.quack_behavior = qb.Quack()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"I'm a mallard duck, my head color is Green"</span>)</span><br></pre></td></tr></table></figure></p><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play_with_mallard_duck</span><span class="params">()</span>:</span></span><br><span class="line">    mallard_duck = ducks.MallardDuck()</span><br><span class="line">    mallard_duck.display()</span><br><span class="line">    mallard_duck.perform_quack()</span><br><span class="line">    mallard_duck.perform_fly()</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play_with_rubber_duck</span><span class="params">()</span>:</span></span><br><span class="line">    rubber_duck = ducks.RubberDuck()</span><br><span class="line">    rubber_duck.display()</span><br><span class="line">    rubber_duck.perform_quack()</span><br><span class="line">    rubber_duck.perform_fly()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play_with_model_duck</span><span class="params">()</span>:</span></span><br><span class="line">    model_duck = ducks.ModelDuck()</span><br><span class="line">    model_duck.display()</span><br><span class="line">    model_duck.perform_quack()</span><br><span class="line">    model_duck.perform_fly()</span><br><span class="line">    model_duck.set_fly_behavior(fb.FlyRocketPowered()) <span class="comment">#动态设置飞行行为</span></span><br><span class="line">    model_duck.perform_fly()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    play_with_mallard_duck()</span><br><span class="line">    play_with_rubber_duck()</span><br><span class="line">    play_with_model_duck()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">-------------------mallard_duck-------------------</span></span><br><span class="line"><span class="string">I'm a mallard duck, my head color is Green</span></span><br><span class="line"><span class="string">quack,quack,quack.</span></span><br><span class="line"><span class="string">I'm flying with my beautiful wings.</span></span><br><span class="line"><span class="string">--------------------------------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-------------------rubber_duck--------------------</span></span><br><span class="line"><span class="string">I'm a rubber duck, I like swimming in the tub.</span></span><br><span class="line"><span class="string">squeak,squeak,squeak.</span></span><br><span class="line"><span class="string">I can't fly.</span></span><br><span class="line"><span class="string">--------------------------------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">--------------------model_duck--------------------</span></span><br><span class="line"><span class="string">I'm a model duck, I can do nothing. Try to change my behaviors.</span></span><br><span class="line"><span class="string">silence.</span></span><br><span class="line"><span class="string">I can't fly.</span></span><br><span class="line"><span class="string">I'm flying with a rocket.</span></span><br><span class="line"><span class="string">--------------------------------------------------</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过将<strong>容易变化的行为（函数）</strong>抽象为接口，再用一组类去实现，使我们在享受继承好处的同时又能避免继承所带来的缺点。这些行为在被抽象之后，已经完全独立于使用行为的客户（鸭子类）。举个栗子，以后如果你有鸡类或者鸟类，都能直接调用这些飞行行为。这种设计模式就叫做<strong>策略模式</strong>，它遵循了以下几个设计原则：</p><ul><li><p><strong>找出应用中可能需要变化之处 ，把它们独立出来，不要和那些不需要变化的代码混在一起。</strong></p><p>（飞行和呱呱叫都属于需要变化的代码）</p></li><li><p><strong>针对接口编程，而不是针对实现编程。</strong></p><p>（将飞行和呱呱叫封装为接口）</p></li><li><p><strong>多用组合，少用继承。</strong></p><p>（飞行和呱呱叫不是由继承而来，而是和适当的行为对象组合而来，将这些行为委托给行为对象代为处理）</p></li></ul><p>本文所有代码已上传至<a href="https://github.com/codingZXY/design_patterns/tree/master/strategy_pattern/code" target="_blank" rel="noopener">Github</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;『策略模式』定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;模拟鸭子&quot;&gt;&lt;a href=&quot;#模拟鸭子&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>异步协程爬虫实战—365淘房</title>
    <link href="http://yoursite.com/2019/04/05/%E5%BC%82%E6%AD%A5%E5%8D%8F%E7%A8%8B%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E2%80%94365%E6%B7%98%E6%88%BF/"/>
    <id>http://yoursite.com/2019/04/05/异步协程爬虫实战—365淘房/</id>
    <published>2019-04-04T16:53:00.790Z</published>
    <updated>2019-04-04T17:07:30.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习如何使用Async/Aiohttp实现异步协程爬虫，基于cxa大佬分享的<a href="https://github.com/muzico425/CSDNUSE" target="_blank" rel="noopener">discogs</a>爬虫源码，实现365淘房的通用爬虫，网站本身没有爬取难度，重点是通用性的实现。因此本文不会对分析过程做过多说明，主要分享通用爬虫思路和cxa大佬异步爬虫框架的使用。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>需求是爬取<a href="http://www.house365.com/" target="_blank" rel="noopener">365淘房网</a>上的二手房和租房的个人房源信息。以二手房为例，首先找到入口的url是<a href="http://hf.sell.house365.com/district_i1/dl_p1.html" target="_blank" rel="noopener">http://hf.sell.house365.com/district_i1/dl_p1.html</a>，分析下url的参数含义：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>hf</td><td>城市缩写，代表合肥</td></tr><tr><td>sell</td><td>房屋类别，代表二手房</td></tr><tr><td>district_i1</td><td>房源类别，代表个人房源</td></tr><tr><td>dl_p1</td><td>翻页参数，代表第一页</td></tr></tbody></table><p>试着把hf换成hz（杭州），发现杭州的页面跟合肥的页面不太一样，自然页面源码也不同。再试试把sell换成（rent），发现租房的页面跟二手房的页面也不一样。这意味着我们要根据不同城市、不同的房屋类别写不同的xpath解析，那么如何只写一份代码，就能实现所有城市所有类别的爬取就值得好好考虑了。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>虽然借鉴了大佬的代码，但在爬取思路上还是有较大差异的。discogs的爬取思路是：先把列表页中的详情url全部爬下来，记录状态为0（初始），再另写一个爬虫，取出初始状态的详情url进行爬取，取出时更新状态为1（开始下载），保存后更新状态为2（下载完了）。这样做的好处是：</p><ol><li>爬取列表页需要发起的请求较少，可以快速爬完</li><li>爬取详情过程中出现意外中断，只要将状态为1的数据更新为0，就能继续爬取。</li><li>通过对状态字段的控制，可支持分布式爬取</li></ol><p>由于只看了通用类和方法，具体爬虫代码并没有细看，因此理解可能有误，但大致思路是这样。</p><p>分析了365淘房后，发现这个网站的数据量并不大，每页列表有20条数据，而最热门的城市也只有100来页，甚至有些城市的最大页码是个位数。使用大佬的思路爬的话有点杀鸡用牛刀的感觉，所以我做了下简化：循环城市，将当前城市列表页中的详情url全部爬取，但不入库，而是查询数据库，过滤已存在的数据（避免对详情url的重复请求），然后爬取所有过滤后的详情url。相当于每爬完一个城市的列表页进行一次入库。</p><p>这样做的好处是：</p><ol><li>列表页数少，即便意外中断，顶多浪费100多次请求次数。</li><li>不进行状态记录，意外中断无需运维。</li><li>单个爬虫，操作方便。</li></ol><p>剩下就是通用性的实现。可以将xpath选择器抽象为一个类，它包含的属性为我们需要解析的字段。然后将网站上结构相同的城市归为一类，根据每种类型创建一个xpath选择器对象，这里用<code>namedtuple</code>来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">XPATH_SELECTOR = namedtuple(<span class="string">"XpathSelector"</span>, [</span><br><span class="line">    <span class="string">"max_page"</span>,</span><br><span class="line">    <span class="string">"info_list"</span>,</span><br><span class="line">    <span class="string">"house_url"</span>,</span><br><span class="line">    <span class="string">'title'</span>,</span><br><span class="line">    <span class="string">'name'</span>,</span><br><span class="line">    <span class="string">'phone'</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SH_TYPE_0 = XPATH_SELECTOR(</span><br><span class="line">    max_page=<span class="string">'//div[@class="lb_zdfy fr"]/p[@class="fl"]/span[2]/text()'</span>,</span><br><span class="line">    info_list=<span class="string">'//div[@id="qy_list_cont"]/div[@class="info_list"]'</span>,</span><br><span class="line">    house_url=<span class="string">'.//a[@class="title fl"]/@href'</span>,</span><br><span class="line">    title=<span class="string">'.//a[@class="title fl"]/text()[last()]'</span>,</span><br><span class="line">    name=<span class="string">'//div[@class="person_information"]//span[@class="p_name fl"]/text()'</span>,</span><br><span class="line">    phone=<span class="string">'//div[@class="person_info fl"]//div[@class="gr_phone_div_fr fl"]/p[1]/text()'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">SH_TYPE_1 = XPATH_SELECTOR(</span><br><span class="line">    max_page=<span class="string">'//div[@class="triggerBox"]//p[@class="number"]/text()'</span>,</span><br><span class="line">    info_list=<span class="string">'//div[@class="listPagBox"]/dl[@id="JS_listPag"]/dd'</span>,</span><br><span class="line">    house_url=<span class="string">'./div[@class="info"]/h3[@class="name"]/a/@href'</span>,</span><br><span class="line">    title=<span class="string">'./div[@class="info"]/h3[@class="name"]/a/text()[last()]'</span>,</span><br><span class="line">    name=<span class="string">'//div[@id="personal"]//p[@class="name"]/text()'</span>,</span><br><span class="line">    phone=<span class="string">'//div[@class="telephoneBox"]/div/text()'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>再做个字典，键是城市，值为xpath选择器对象，之后在解析时，只要根据城市获取对应的选择器对象进行解析即可。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>项目源码已上传至<a href="https://github.com/codingZXY/spider/tree/master/house365_crawler" target="_blank" rel="noopener">GitHub</a>。</p><p>以下是对公共基类base_crawler中两段代码的说明。</p><h3 id="请求公共方法"><a href="#请求公共方法" class="headerlink" title="请求公共方法"></a>请求公共方法</h3><p>在get_session中实现异步请求的公共方法，_kwargs参数可以传入请求常用的参数（如headers,data等），也可根据需求增加自定义参数。比如该项目中请求回来的源码只能用gbk来解码，因此增加了一个encoding的参数，用于传入解码方式。</p><p>bound_get_session方法通过<code>asyncio.Semaphore</code>限制并发数。discogs中并未使用该方法，而是通过对异步生成器进行切片的方式来实现并发限制。通常使用Semaphore就可满足需求，但是当数据量较大时，为节省内存，需选择后者。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">bound_get_session</span><span class="params">(self, url, _kwargs: dict = &#123;&#125;, source_type=<span class="string">"text"</span>, status_code=<span class="number">200</span>)</span> -&gt; Response:</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> sem:</span><br><span class="line">            res = <span class="keyword">await</span> self.get_session(url, _kwargs, source_type, status_code)</span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(random.random())</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="meta">    @retry(attempts=MAX_RETRY_TIMES)</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_session</span><span class="params">(self, url, _kwargs: dict = &#123;&#125;, source_type=<span class="string">"text"</span>, status_code=<span class="number">200</span>)</span> -&gt; Response:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        :param kwargs:url,headers,data,params,etc,,</span></span><br><span class="line"><span class="string">        :param method: get post.</span></span><br><span class="line"><span class="string">        :param timeout: defalut 5s.</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 使用marshal复制提高性能</span></span><br><span class="line">        kwargs = marshal.loads(marshal.dumps(_kwargs))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> USE_PROXY:</span><br><span class="line">            kwargs[<span class="string">"proxy"</span>] = <span class="keyword">await</span> self.get_proxy()</span><br><span class="line">        method = kwargs.pop(<span class="string">"method"</span>, <span class="string">"get"</span>)</span><br><span class="line">        timeout = kwargs.pop(<span class="string">"timeout"</span>, <span class="number">5</span>)</span><br><span class="line">        encoding = kwargs.pop(<span class="string">"encoding"</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">with</span> async_timeout.timeout(timeout):</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> getattr(self.session, method)(url, **kwargs) <span class="keyword">as</span> req:</span><br><span class="line">                status = req.status</span><br><span class="line">                <span class="keyword">if</span> status <span class="keyword">in</span> [status_code, <span class="number">201</span>]:</span><br><span class="line">                    <span class="keyword">if</span> source_type == <span class="string">"text"</span>:</span><br><span class="line">                        source = <span class="keyword">await</span> req.text(encoding=encoding,errors=<span class="string">'ignore'</span>) <span class="keyword">if</span> encoding <span class="keyword">else</span> <span class="keyword">await</span> req.text()</span><br><span class="line">                    <span class="keyword">elif</span> source_type == <span class="string">"buff"</span>:</span><br><span class="line">                        source = <span class="keyword">await</span> req.read()</span><br><span class="line"></span><br><span class="line">        crawler_log.debug(<span class="string">f"get url:<span class="subst">&#123;url&#125;</span>,status:<span class="subst">&#123;status&#125;</span>"</span>)</span><br><span class="line">        res = Response(status=status, source=source)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="解析公共方法"><a href="#解析公共方法" class="headerlink" title="解析公共方法"></a>解析公共方法</h3><p>_response参数可以是Response对象、页面源码字符串、甚至是xpath节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xpath</span><span class="params">(self, _response, rule, _attr=None,clean_method=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(_response, Response):</span><br><span class="line">            source = _response.text</span><br><span class="line">            root = html.fromstring(source)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> isinstance(_response, str):</span><br><span class="line">            source = _response</span><br><span class="line">            root = html.fromstring(source)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            root = _response</span><br><span class="line">        nodes = root.xpath(rule)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> _attr:</span><br><span class="line">            <span class="keyword">if</span> _attr == <span class="string">"text"</span>:</span><br><span class="line">                result = [entry.text <span class="keyword">for</span> entry <span class="keyword">in</span> nodes]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = [entry.get(_attr) <span class="keyword">for</span> entry <span class="keyword">in</span> nodes]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = nodes</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> clean_method:</span><br><span class="line">            result[<span class="number">0</span>] = clean_method(result[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在学习如何使用Async/Aiohttp实现异步协程爬虫，基于cxa大佬分享的&lt;a href=&quot;https://github.com/m
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python多线程实现图片批量下载</title>
    <link href="http://yoursite.com/2019/02/28/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2019/02/28/Python多线程实现图片批量下载/</id>
    <published>2019-02-27T17:36:28.279Z</published>
    <updated>2019-02-27T17:57:36.752Z</updated>
    
    <content type="html"><![CDATA[<p>今天帮朋友写了个批量下载图片的脚本，之前一直以为爬取图片必须要有图片的链接地址，原来请求下载链接也可以实现。话不多说，先上需求：</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>在一个Excel文件中，存有1800+个链接，每个链接包含一张图片，需实现对这些图片的批量下载。</p><p><img src="https://imagez.to/i/4A9R9nPD.png" alt="1551283857844"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>随便选了一个链接： <a href="http://data.rbge.org.uk/herb/E00025608" target="_blank" rel="noopener">http://data.rbge.org.uk/herb/E00025608</a> ， 访问该链接，确实能看到一张图片。</p><p><img src="https://imagez.to/i/ADcCyw6G.png" alt="1551284098371"></p><p>F12定位了下图片，直接就能找到这张图的url地址。</p><p><img src="https://imagez.to/i/FWF80GM6.png" alt="1551284351903"></p><p><code>.</code>代表当前路径，把它替换成当前浏览器上方显示的url，那完整的链接地址就是<a href="https://data.rbge.org.uk/search/herbarium/scripts/getzoom3.php?path=E00025608.zip;file:TileGroup0/0-0-0.jpg" target="_blank" rel="noopener">https://data.rbge.org.uk/search/herbarium/scripts/getzoom3.php?path=E00025608.zip;file:TileGroup0/0-0-0.jpg</a></p><p>直接访问该链接，是一堆乱码。试着用Python的requests库请求了下这个地址，并将返回内容写入.jpg文件，成功下载。但清晰度堪忧，且朋友对清晰度的要求还挺高，于是又想了下其他方式，发现，图片是可以点击的，跳转到的网站是这样的：</p><p><img src="https://imagez.to/i/ITjLDcVB.png" alt="1551285295190"></p><p>网站下方<code>Get Tiff</code>按钮支持图片的下载，且可以自行选择像素大小。试着点击按钮并抓了下包，发送的请求为</p><p><img src="https://imagez.to/i/o6fRdJYf.png" alt="1551285615659"></p><p>同样用requests模拟这个请求，成功下载。这个请求包含两个参数，base和tier，base可理解为图片id，在Excel文件的链接中能找到；tier表示网站支持选取的七个像素，从0-6递增，6代表5677x8343。那么只要读取到Excel文件中的图片id，再循环模拟请求就能实现批量下载了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>完整代码已上传至<a href="https://github.com/codingZXY/spider/tree/master/GBIF" target="_blank" rel="noopener">GitHub</a> ,这里贴两段关键代码。</p><h4 id="读取Excel中的图片id并放入队列"><a href="#读取Excel中的图片id并放入队列" class="headerlink" title="读取Excel中的图片id并放入队列"></a>读取Excel中的图片id并放入队列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        wb = load_workbook(self.file_name)</span><br><span class="line">        sheet = wb.active</span><br><span class="line">        rows = list(sheet.rows)[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">            s = re.search(<span class="string">r'http://data.rbge.org.uk/herb/(.*)'</span>,row[<span class="number">1</span>].value)</span><br><span class="line">            base = s.group(<span class="number">1</span>).strip()</span><br><span class="line">            self.base_queue.put(base)</span><br></pre></td></tr></table></figure><p>读取Excel使用了openpyxl库的load_workbook方法，使用<code>sheet = wb.active</code>获取当前Sheet，用<code>rows = list(sheet.rows)[1:]</code> 获取所有行，并用切片过滤首行的列头。之后用正则提取图片id并放入队列中，供下载线程的调用。</p><h4 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.base_queue.empty():</span><br><span class="line">            base = self.base_queue.get()</span><br><span class="line">            print(<span class="string">f'正在下载图片<span class="subst">&#123;base&#125;</span>...'</span>)</span><br><span class="line">            url = self.download_url.format(base=base,tier=self.tier)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    response = requests.get(url,headers=self.headers,stream=<span class="keyword">True</span>)</span><br><span class="line">                    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                        <span class="keyword">with</span> open(<span class="string">f'<span class="subst">&#123;self.save_dir&#125;</span>/<span class="subst">&#123;base&#125;</span>_<span class="subst">&#123;self.tier&#125;</span>.tiff'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                            <span class="keyword">for</span> chunk <span class="keyword">in</span> response.iter_content(<span class="number">100000</span>):</span><br><span class="line">                                f.write(chunk)</span><br><span class="line"></span><br><span class="line">                        print(<span class="string">f'图片<span class="subst">&#123;base&#125;</span>下载完成。'</span>)</span><br><span class="line">                        time.sleep(random.random())</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    print(<span class="string">f'请求出错,地址：<span class="subst">&#123;url&#125;</span> 错误：<span class="subst">&#123;e&#125;</span> 正在重新请求(<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>)...'</span>)</span><br><span class="line">                    time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>该函数不断从队列中提取图片id，传入事先定义好的下载链接（之前点击下载按钮抓包抓到的那个链接），请求该链接并将返回内容写入文件，直到队列为空则停止。</p><p>之后将此函数作为线程的目标函数即可实现多线程下载。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天帮朋友写了个批量下载图片的脚本，之前一直以为爬取图片必须要有图片的链接地址，原来请求下载链接也可以实现。话不多说，先上需求：&lt;/p&gt;
&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python+Appium实现群控软件的快速开发</title>
    <link href="http://yoursite.com/2019/02/22/Python+Appium%E5%AE%9E%E7%8E%B0%E7%BE%A4%E6%8E%A7%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2019/02/22/Python+Appium实现群控软件的快速开发/</id>
    <published>2019-02-22T15:25:53.939Z</published>
    <updated>2019-02-27T17:52:52.469Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>群控软件：使用计算机程序控制多台移动端设备的App，进行一些定制化的自动操作。</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近应客户需求，开发了几款基于Appium框架的群控软件，如微信自动加好友、抖音自动关注等。将开发过程中用到的一些公共方法进行了封装，用于实现此类软件的快速开发。本文将以QQ自动加好友为例，从需求分析、流程设计、代码编写三个步骤，说说如何实现群控软件的快速开发。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>客户的需求通常不会十分明确，特别是这类群控软件，可能需求就两句话：“小张啊，我现在有几万个淘宝商家的QQ号，你看能不能写个程序自动添加成好友？”。</p><p>那么针对这样一个两句话的需求，如何进行需求分析呢？首先从可行性的角度去考虑，在脑海中模拟一下，想要实现这个需求，会遇到哪些问题，然后将问题一一列出，如QQ自动加好友：</p><ol><li>QQ是否有添加好友的开放接口？</li><li>如果没有开放接口，就需要模拟人为操作，那要选用哪个平台？PC端还是移动端？</li><li>这几万个QQ号现在存在哪里？数据库还是Excel文件？</li><li>用于添加这几万个QQ号的QQ是一个还是多个？如果是多个，是将几万个QQ号平均分配还是全部添加？</li><li>……</li></ol><p>将这些问题分为两类：技术类（1、2）和业务类（3、4）。将技术类的问题解决后，带着业务类问题与客户进行讨论和确认。以下是技术验证并与客户讨论需求后得出的结论：</p><ol><li>暂时没有找到QQ添加好友的开放接口，因此选择以模拟人为操作的方式实现。</li><li>在PC端操作的话，只能通过坐标定位去模拟，该方式稳定性低；而Appium框架支持手机App中的元素选择，相对来说稳定性较高，因此选用移动端。</li><li>QQ号现在存在Excel文件中，文件包含两个字段：商家名称、QQ号。</li><li>多个QQ，全部添加。</li><li>……</li></ol><p>确保这些问题全部解决后，就可以进入下一步，流程设计了。</p><h2 id="流程设计"><a href="#流程设计" class="headerlink" title="流程设计"></a>流程设计</h2><p>流程设计是群控软件的所有开发环节中最简单的一环，只需要电脑连接手机后，配合Appium桌面版，在手机上模拟一遍操作流程，将自动化操作步骤和对应的元素选择器记录下来就行。</p><p>比如QQ加好友的步骤为：打开手机QQ→点击右上角的加号→点击加好友→输入QQ号→点击找人→点击加好友→输入验证消息→输入备注→点击发送→点击返回→继续输入QQ号。将这些步骤中涉及到的按钮、文本框等元素的选择器进行记录，通常会通过id或xpath进行选择。</p><p>其实就是为接下来编写代码提前打了个草稿，这个过程本是可以在编写代码的时候进行的，但加入这个环节，提前考虑好流程，并将元素选择器准备好，可以有效提高开发效率。</p><p>以下是QQ自动加好友的流程设计：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">点击加号</span><br><span class="line">xpath://android.widget.ImageView[@content-desc=&quot;快捷入口&quot;]</span><br><span class="line"></span><br><span class="line">点击加好友</span><br><span class="line">xpath://android.widget.LinearLayout[@content-desc=&quot;加好友/群 按钮&quot;]</span><br><span class="line"></span><br><span class="line">输入QQ号</span><br><span class="line">xpath://android.widget.EditText[@content-desc=&quot;搜索栏、QQ号、手机号、群、公众号&quot;]</span><br><span class="line">id:com.tencent.mobileqq:id/et_search_keyword</span><br><span class="line"></span><br><span class="line">点击找人</span><br><span class="line">xpath://android.widget.LinearLayout[@content-desc=&quot;找人:&#123;当前添加的QQ号&#125;&quot;]</span><br><span class="line"></span><br><span class="line">点击加好友</span><br><span class="line">id:com.tencent.mobileqq:id/txt</span><br><span class="line"></span><br><span class="line">输入验证消息</span><br><span class="line">xpath://android.widget.RelativeLayout/android.widget.EditText[@resource-id=&quot;com.tencent.mobileqq:id/name&quot;]</span><br><span class="line"></span><br><span class="line">输入备注</span><br><span class="line">xpath://android.widget.LinearLayout/android.widget.EditText[@resource-id=&quot;com.tencent.mobileqq:id/name&quot;]</span><br><span class="line"></span><br><span class="line">点击发送</span><br><span class="line">id:com.tencent.mobileqq:id/ivTitleBtnRightText</span><br><span class="line"></span><br><span class="line">点击返回</span><br><span class="line">xpath://android.widget.TextView[@resource-id=&quot;com.tencent.mobileqq:id/ivTitleBtnLeft&quot; and @text=&quot;返回&quot;]</span><br><span class="line"></span><br><span class="line">从第三步开始循环</span><br></pre></td></tr></table></figure><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><p>项目源码已上传至<a href="https://github.com/codingZXY/AppiumProjects/tree/master/qq" target="_blank" rel="noopener">GitHub</a>。</p><p>其中，核心的几个文件为：</p><ul><li><p>oappium.py</p><p>实现了两个基类：AppiumAutoTool和MultiAppium。</p></li><li><p>qqaf_auto_tool.py</p><p>继承oappium.py中的AppiumAutoTool，实现自动化流程。</p></li><li><p>qqaf_auto_tool_multi.py</p><p>继承oappium.py中的MultiAppium，实现手机的集群控制。</p></li><li><p>qqaf_auto_tool_ui.py</p><p>使用QtDesiner+PyUic生成的PyQt界面源码。</p></li><li><p>main.py</p><p>连接界面层和底层脚本，进行界面交互和功能整合。</p></li></ul><p>具体代码不做展开说明，可自行参考源码。</p><h3 id="集群控制的实现思路"><a href="#集群控制的实现思路" class="headerlink" title="集群控制的实现思路"></a>集群控制的实现思路</h3><p>首先简单介绍一下<a href="http://appium.io/" target="_blank" rel="noopener">Appium</a>。Appium是一个移动端App的自动化测试框架，使用Python开发时需要安装第三方库<a href="https://github.com/appium/python-client" target="_blank" rel="noopener">Appium-Python-Client</a>，使用该框架能完成一些App上的自动化任务，甚至是爬虫任务。</p><p>这有点类似PC端的selenium，不用去关心数据接口和接口参数，而是模拟人工的点击、输入、滑动等操作，并返回界面源码，做到可见即可爬。</p><p>Appium控制单台设备的实现方式是，首先开启一个Appium服务器（端口默认为4723），再根据Desired Capabilities（设备及App的相关参数）加上对应的服务器端口（4723）来启动driver驱动来进行控制。</p><p>因此多设备集群控制的实现思路就是，使用多线程，根据设备数量在不同端口启动多个Appium服务器，再配置对应的设备参数在对应端口启动多个driver驱动。集群控制的实现代码在oappium.py中的MultiAppium类中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;群控软件：使用计算机程序控制多台移动端设备的App，进行一些定制化的自动操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Markdown for Typora使用手册</title>
    <link href="http://yoursite.com/2019/02/22/Markdown%20for%20Typora%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2019/02/22/Markdown for Typora使用手册/</id>
    <published>2019-02-22T13:49:59.835Z</published>
    <updated>2019-04-18T16:29:45.268Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文参考自Typora的官方手册</p></blockquote><p>[TOC]</p><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>之前一直想用Markdown来写东西，苦于找不到一个好用的Markdown编辑器，直到发现了Typora，用上之后就停不下来了。Typora是一个简洁优雅且免费的Markdown编辑器，它支持多平台（Mac/Windows/Linux），下载链接在<a href="https://www.typora.io/" target="_blank" rel="noopener">这里</a>。以下内容参考自Typora的官方手册，原文链接在<a href="https://support.typora.io/Markdown-Reference/" target="_blank" rel="noopener">这里</a>。</p><h2 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h2><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>在Markdown源码中，段落之间需要用两个以上的空行分开，在Typora中，只需要一个空行（敲一下回车）来写新的段落。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题使用一个到六个（<code>#</code>）号放在一行的开头来定义，代表一级标题到六级标题。例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 这是一级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 这是二级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">###### 这是六级标题</span></span><br></pre></td></tr></table></figure></p><h3 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h3><p>使用（<code>&gt;</code>）号放在引用内容的开头来使用引用块，如果引用块跨多个段落，就在段落间的空行加上（<code>&gt;</code>）例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是包含了两个段落内容的引用块。 这是第一段。</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="quote">&gt; 这是第二段</span></span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><p>这是包含了两个段落内容的引用块。 这是第一段。</p><p>这是第二段</p></blockquote><p>若要使用内嵌引用块，则使用多个（<code>&gt;</code>）号，如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; 这是一个套了两层的内嵌引用块</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><blockquote><p>这是一个套了两层的内嵌引用块</p></blockquote></blockquote><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>使用（<code>*</code>）/（<code>+</code>）/（<code>-</code>）来创建无序列表，例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*   </span>Red</span><br><span class="line"><span class="bullet">*   </span>Green</span><br><span class="line"><span class="bullet">*   </span>Blue</span><br></pre></td></tr></table></figure></p><p>效果：</p><ul><li>Red</li><li>Green</li><li>Blue</li></ul><p>使用（<code>1.</code>）来创建有序列表，例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>Red</span><br><span class="line"><span class="bullet">2. </span>Green</span><br><span class="line"><span class="bullet">3. </span>Blue</span><br></pre></td></tr></table></figure></p><p>效果：</p><ol><li>Red</li><li>Green</li><li>Blue</li></ol><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>使用（<code>- [ ]</code>）或（<code>- [x]</code>）创建任务列表，x代表默认勾选。例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[x] 任务1</span><br><span class="line"><span class="bullet">- </span>[ ] 任务2</span><br><span class="line"><span class="bullet">- </span>[ ] 任务3</span><br><span class="line"><span class="bullet">- </span>[ ] 任务4</span><br></pre></td></tr></table></figure></p><p>效果：</p><ul><li style="list-style: none"><input type="checkbox" checked> 任务1</li><li style="list-style: none"><input type="checkbox"> 任务2</li><li style="list-style: none"><input type="checkbox"> 任务3</li><li style="list-style: none"><input type="checkbox"> 任务4</li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>在Typora中，输入<code>| First Header  | Second Header |</code> 并按下回车，会创建一个包含两列的表格，点击表格可以使用表格的功能菜单直接对表格进行编辑。表格语法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| First Header  | Second Header |</span><br><span class="line">| ------------- | ------------- |</span><br><span class="line">| Content Cell  | Content Cell  |</span><br><span class="line">| Content Cell  | Content Cell  |</span><br></pre></td></tr></table></figure><p>效果：<br>| First Header  | Second Header |<br>| ————- | ————- |<br>| Content Cell  | Content Cell  |<br>| Content Cell  | Content Cell  |</p><p>在列头加上冒号可以控制内容单元格的对齐方式，例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Left-Aligned  | Center Aligned  | Right Aligned |</span><br><span class="line">| :------------ |:---------------:| -----:|</span><br><span class="line">| col 3 is      | some wordy text | $1600 |</span><br><span class="line">| col 2 is      | centered        |   $12 |</span><br><span class="line">| zebra stripes | are neat        |    $1 |</span><br></pre></td></tr></table></figure></p><p>效果：<br>| Left-Aligned  | Center Aligned  | Right Aligned |<br>| :———— |:—————:| —–:|<br>| col 3 is      | some wordy text | $1600 |<br>| col 2 is      | centered        |   $12 |<br>| zebra stripes | are neat        |    $1 |</p><p>除此之外，表格内容还支持加粗、斜体、超链接等语法。</p><h3 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h3><p>可以像这样创建注脚：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^注脚]：指解释字句的文字，也泛指解释、说明。</span><br></pre></td></tr></table></figure></p><p>效果：</p><p>啥是<a href="指解释字句的文字，也泛指解释、说明。">^注脚</a>？</p><h3 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h3><p>在一个空行后输入<code>***</code>或<code>---</code>来生成一条水平线。<br>例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>效果：</p><hr><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>输入[toc]按下回车，会根据标题自动创建目录</p><h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>使用<code>[链接内容](链接地址 &quot;标题&quot;)</code>来创建超链接，例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个[<span class="string">超链接</span>](<span class="link">http://example.com/ "鼠标移至显示标题"</span>)的例子.</span><br></pre></td></tr></table></figure></p><p>效果：<br>这是一个<a href="http://example.com/" title="鼠标移至显示标题" target="_blank" rel="noopener">超链接</a>的例子.</p><h4 id="内部链接"><a href="#内部链接" class="headerlink" title="内部链接"></a>内部链接</h4><p>Markdown支持创建指向文章标题的内部链接，例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个内部链接的例子，Ctrl+鼠标左键点击[<span class="string">这里</span>](<span class="link">#块元素</span>)跳至<span class="code">`块元素`</span>标题</span><br></pre></td></tr></table></figure></p><p>效果：<br>这是一个内部链接的例子，Ctrl+鼠标左键点击<a href="#块元素">这里</a>跳至<code>块元素</code>标题</p><h4 id="引用链接"><a href="#引用链接" class="headerlink" title="引用链接"></a>引用链接</h4><p>若文章中多处用到同一个超链接，可以使用引用链接。使用两个中括号来创建，例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这是一个引用链接的[<span class="string">例子</span>][<span class="symbol">id</span>]。</span><br><span class="line"></span><br><span class="line">然后在文章的任意位置为id赋值。</span><br><span class="line"></span><br><span class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/  "此处为标题，可空"</span></span><br></pre></td></tr></table></figure></p><p>效果：</p><p>这是一个引用链接的<a href="http://example.com/" title="此处为标题，可空" target="_blank" rel="noopener">例子</a>。</p><p>然后在文章的任意位置为id赋值。</p><p>若第二个中括号为空，则链接内容可以作为id使用，例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">百度</span>][<span class="symbol"></span>]</span><br><span class="line">[<span class="symbol">百度</span>]:<span class="link">https://www.baidu.com/</span></span><br></pre></td></tr></table></figure></p><p>效果：<br><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a></p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>若内容是个URL地址，可以用<code>&lt;&gt;</code>来包裹，例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i@typora.io&gt;</span><br></pre></td></tr></table></figure></p><p>效果：<br> <a href="mailto:&#105;&#x40;&#x74;&#x79;&#112;&#111;&#x72;&#97;&#x2e;&#105;&#111;" target="_blank" rel="noopener">&#105;&#x40;&#x74;&#x79;&#112;&#111;&#x72;&#97;&#x2e;&#105;&#111;</a></p><p>Typora会自动检测标准的URL地址，比如：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>插入图片的语法为<code>![文件名](文件路径)</code>，和超链接类似，需要在中括号前加个<code>！</code>。例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片示例1</span>](<span class="link">/path/to/img1.jpg</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">图片示例2</span>](<span class="link">/path/to/img2.jpg "此处为标题，可空"</span>)</span><br></pre></td></tr></table></figure></p><p>在Typora中，可以直接将图片拖入编辑器来插入图片。</p><p>若文章要发布到网上，那么肯定不能使用图片的本地路径。这时候就需要用到图床了，图床是指专门用来存放图片的服务器，可以用它来生成图片的永久外链。建议使用<a href="https://sm.ms/" target="_blank" rel="noopener">sm</a>来生成，sm是一个在线生成图床的网站，支持多种图片格式，无需注册即可免费使用。使用图床生成图片链接后，将文件路径替换为链接即可，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">typora</span>](<span class="link">https://thumbsnap.com/i/iF31zInH.png?0221 "图片示例"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://thumbsnap.com/i/iF31zInH.png?0221" alt="typora" title="图片示例"></p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>使用(<code>*</code>)或(<code>_</code>)来包裹文本，可以将文本变成斜体。例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*使用星号渲染为斜体的文本*</span></span><br><span class="line"><span class="emphasis">_使用下划线渲染为斜体的文本_</span></span><br></pre></td></tr></table></figure></p><p>效果：<br><em>使用星号渲染为斜体的文本</em><br><em>使用下划线渲染为斜体的文本</em></p><p>由于下划线经常用于变量的命名，<a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="noopener">GFM</a>会忽略对这类斜体渲染。例如wow_great_stuff中的great并没有渲染成斜体。</p><p>若文本被<code>*</code>包裹，又不想显示斜体，可以在<code>*</code>前加上反斜杆<code>\</code>，例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="emphasis">*被星号包裹的文本\*</span></span><br></pre></td></tr></table></figure></p><p>效果：<br>*被星号包裹的文本*</p><p>Typora推荐使用星号(<code>*</code>)来渲染斜体。</p><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><p>使用双星号(<code>**</code>)或双下划线(<code>__</code>)来包裹文本，可以将文本变成粗体。例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**使用双星号渲染为粗体的文本**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">__使用双下划线渲染为粗体的文本__</span></span><br></pre></td></tr></table></figure></p><p>效果：<br><strong>使用双星号渲染为粗体的文本</strong></p><p><strong>使用双下划线渲染为粗体的文本</strong></p><p>Typora推荐使用双星号(<code>**</code>)来渲染粗体。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>行内代码使用倒引号(`)来包裹，例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个<span class="code">`行内代码`</span>。</span><br></pre></td></tr></table></figure></p><p>效果：<br>这是一个<code>行内代码</code>。</p><p>代码块使用三个倒引号(```)来包裹。</p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p><a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="noopener">GFM</a>添加了删除线的语法，在标准的Markdown语法中是没有的。<br>使用双波浪线(<code>~~</code>)来为文本添加删除线，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~被删除的文本~~</span><br></pre></td></tr></table></figure><p>效果：<br><del>被删除的文本</del></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线使用原生的HTML代码来生成。例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;带下划线的文本&lt;/u&gt;</span><br></pre></td></tr></table></figure></p><p>效果：<br><u>带下划线的文本</u></p><h3 id="表情符"><a href="#表情符" class="headerlink" title="表情符"></a>表情符</h3><p>输入表情符，可自动转换为表情，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:smile:</span><br></pre></td></tr></table></figure></p><p>效果：<br>:smile:</p><p>更多表情符，见<a href="https://www.webfx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">这里</a>。</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>可以使用HTML语法来为内容添加样式，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style=&quot;color:red&quot;&gt;用HTML语法改变字体颜色为红色&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><p>效果：<br><span style="color:red">用HTML语法改变字体颜色为红色</span></p><p>但纯Markdown并不支持这种操作。</p><h3 id="嵌入内容"><a href="#嵌入内容" class="headerlink" title="嵌入内容"></a>嵌入内容</h3><p>有些网站提供了基于iframe的嵌入代码，可以直接拷贝至Typora。例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">'265'</span> <span class="attr">scrolling</span>=<span class="string">'no'</span> <span class="attr">title</span>=<span class="string">'Fancy Animated SVG Menu'</span> <span class="attr">src</span>=<span class="string">'http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2'</span> <span class="attr">frameborder</span>=<span class="string">'no'</span> <span class="attr">allowtransparency</span>=<span class="string">'true'</span> <span class="attr">allowfullscreen</span>=<span class="string">'true'</span> <span class="attr">style</span>=<span class="string">'width: 100%;'</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果：</p><iframe height="265" scrolling="no" title="Fancy Animated SVG Menu" src="http://codepen.io/jeangontijo/embed/OxVywj/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"></iframe><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p>使用HTML的<code>&lt;video&gt;</code>标签来嵌入视频，例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"http://edge.ivideo.sina.com.cn/141968369.mp4?KID=sina,viask&amp;Expires=1551024000&amp;ssig=AcZJje8UOc"</span> /&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>效果：</p><video src="http://edge.ivideo.sina.com.cn/141968369.mp4?KID=sina,viask&Expires=1551024000&ssig=AcZJje8UOc"><h3 id="其他HTML语法的支持"><a href="#其他HTML语法的支持" class="headerlink" title="其他HTML语法的支持"></a>其他HTML语法的支持</h3><p>更多Typora对HTML的支持在<a href="http://support.typora.io/HTML/" target="_blank" rel="noopener">这里</a>可以找到。</p></video>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文参考自Typora的官方手册&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h2&gt;&lt;p&gt;之前一直想用
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/02/04/hello-world/"/>
    <id>http://yoursite.com/2019/02/04/hello-world/</id>
    <published>2019-02-04T05:06:42.570Z</published>
    <updated>2019-02-04T05:06:42.571Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
